// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  name      String
  age       Int
  image     String?
  gender    Gender
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userJobs             UserJob[]
  userRelationships    UserRelationship[] @relation("UserRelationships")
  partnerRelationships UserRelationship[] @relation("PartnerRelationships")
  posts                Post[]
  comments             Comment[]
  reactions            Reaction[]

  @@map("tbl_user")
}

model Job {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userJobs UserJob[]

  @@map("tbl_job")
}

model UserJob {
  id     Int @id @default(autoincrement())
  userId Int
  jobId  Int

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("tbl_user_job")
}

model UserRelationship {
  id               Int              @id @default(autoincrement())
  userId           Int
  partnerId        Int?
  relationshipType RelationshipType
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  user    User  @relation("UserRelationships", fields: [userId], references: [id], onDelete: Cascade)
  partner User? @relation("PartnerRelationships", fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@map("tbl_user_relationship")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  reactions Reaction[]
  images    PostImage[]

  @@map("tbl_post")
}

model PostImage {
  id        Int      @id @default(autoincrement())
  postId    Int
  imageUrl  String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("tbl_post_image")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@map("tbl_comment")
}

model Reaction {
  id        Int          @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  type      ReactionType
  createdAt DateTime     @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("tbl_reaction")
}

enum Gender {
  MALE
  FEMALE
}

enum RelationshipType {
  SINGLE
  ENGAGED
  MARRIED
  IN_RELATIONSHIP
  SITUATIONSHIP
  GIRLFRIEND
  BOYFRIEND
  WIFE
  HUSBAND
  DHARMA_SISTER
  DHARMA_BROTHER
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
}
